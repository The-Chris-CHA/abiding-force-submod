<?xml version="1.0" ?>

<Equations>

	<!-- Neglect categorized as relative low number of forces compared to rest of planets -->
	<Is_Neglected_By_My_Opponent_Space>
		((Variable_Target.EnemyForce.HasSpaceForce + Variable_Target.EnemyForce.HasGroundForce) > 0)
		*
		(1.0 - Variable_Target.EnemyForce.SpaceTotalNBPTM)
	</Is_Neglected_By_My_Opponent_Space>

	
	<Is_Neglected_By_My_Opponent_Ground>
		((Variable_Target.EnemyForce.HasSpaceForce + Variable_Target.EnemyForce.HasGroundForce) > 0)
		*
		(1.0 - Variable_Target.EnemyForce.GroundTotalNBPTM)
	</Is_Neglected_By_My_Opponent_Ground>

	
	<Allow_Blind_Ground_Production>
		(
			0.5
			*
			(Function_Enemy_Global_Land_Unit_Raw_Total.Evaluate > (1.1 * Function_Friendly_Global_Land_Unit_Raw_Total.Evaluate))
			+
			0.5
			*
			(Function_Enemy_Global_Land_Unit_Raw_Total.Evaluate > (0.9 * Function_Friendly_Global_Land_Unit_Raw_Total.Evaluate))
		)
		*
		(Script_AnyFreeLandSlots.Evaluate)
		*
		(Variable_Self.MaxedGroundbases > 0.5)
	</Allow_Blind_Ground_Production>
	
	
	<Allow_Blind_Space_Production>
		0.01
		+
		(Function_Maxed_Shipyards.Evaluate > 0.5)
		*
		(
			1.0
			+
			(Function_Enemy_Global_Space_Unit_Raw_Total.Evaluate > (1.1 * Function_Friendly_Global_Space_Unit_Raw_Total.Evaluate))
			+
			(Function_Enemy_Global_Space_Unit_Raw_Total.Evaluate > (0.9 * Function_Friendly_Global_Space_Unit_Raw_Total.Evaluate))
			+
			Function_Needs_More_Space_Force_Globally.Evaluate
		)
	</Allow_Blind_Space_Production>
	
	
	<Allow_SuperCapital_Production>
		(Function_Current_Credits.Evaluate >= 20000)
		*
		Variable_Self.HasStructure {Parameter_Type = "Empire_Shipyard_Level_Four",
									Parameter_Type = "Eriadu_Shipyard_Level_Four",
									Parameter_Type = "Greater_Maldrood_Shipyard_Level_Four",
									Parameter_Type = "Pentastar_Shipyard_Level_Four",
									Parameter_Type = "Zsinj_Shipyard_Level_Four",
									Parameter_Type = "Rancor_Base",
									Parameter_Type = "NewRepublic_Shipyard_Level_Four",
									Parameter_Type = "CSA_Shipyard_Level_Four",
									Parameter_Type = "Republic_Shipyard_Level_Four",
									Parameter_Type = "CIS_Shipyard_Level_Four"}
		*
		(1 - Function_Has_Upgradeable_Hero.Evaluate)
	</Allow_SuperCapital_Production>

	<!-- Empty planet, or neglected, or generally wealthy, or a chokepoint or other markup -->
	<!-- reduced by being an AI planet that is risky to take or one that opens a new faction connection -->
	<Is_Good_Invasion_Target>
		50.0 * (Variable_Target.EnemyForce.HasGroundForce == 0.0) * (Variable_Target.EnemyForce.HasSpaceForce == 0.0) * (1.0 - Variable_Target.StarbaseLevel)
		+ 
		2.0 * Function_Is_Neglected_By_My_Opponent_Space.Evaluate * (1.0 - Variable_Target.EnemyForce.NearbySpaceTotal)
		+
		2.0 * Function_Is_Neglected_By_My_Opponent_Ground.Evaluate * (1.0 - Variable_Target.EnemyForce.NearbyGroundTotal)
		+
		8.0 * Function_GenericPlanetValue.Evaluate
		+
		5.0 * Variable_Target.BaseIncome * Function_Economic_Personality.Evaluate
		+
		5.0 * Variable_Target.Hints.Chokepoint
		+
		2.0 * Variable_Target.ConnectsIsolatedPlanetsByForce
		+
		2.0 * Variable_Target.Markup
		+ 
		Variable_Target.Hints.PriorityTarget
		-
		10.0 * (Function_Is_AI_And_Should_Be_Ignored.Evaluate)
		-
		10.0 * Function_Opens_New_Front.Evaluate
		-
		25.0 * Function_Isolationist_Personality.Evaluate * (1.0 - Variable_Target.IsFaction{Parameter_Faction = "Warlords", Parameter_Faction = "Independent_Forces"})
	</Is_Good_Invasion_Target>

	<!-- AI planet that is either 1/3 current total forces (for not cowards) or 1/5 current total forces (for cowards) -->
	<!-- Coward cares if they are connected to player currently -->
	<Is_AI_And_Should_Be_Ignored>
		(Variable_Target.IsHumanControlled == 0.0)
		*
		(
			(Function_Space_Contrast.Evaluate > (Game.FriendlyForce.SpaceTotalUnnormalized / 3.0))
			*
			(1.0 - Function_Cowardly_Personality.Evaluate)
			+
			(Function_Space_Contrast.Evaluate > (Game.FriendlyForce.SpaceTotalUnnormalized / 5.0)) 
			* 
			Function_Cowardly_Personality.Evaluate
			*
			Variable_Self.AnyCurrentThreats
		)
	</Is_AI_And_Should_Be_Ignored>
	
	<!-- If the planet has forces greater than 2x our entire force, ignore it -->
	<Should_Be_Ignored>
		(Function_Space_Contrast.Evaluate > (Game.FriendlyForce.SpaceTotalUnnormalized * 2.0))
	</Should_Be_Ignored>


	<Needs_More_Space_Force_Globally>
		(Variable_Human.SpaceTotalUnnormalized > (Variable_Self.SpaceTotalUnnormalized))
	</Needs_More_Space_Force_Globally>

	
	<Has_Enough_Space_Force_Globally>
		(0.7 * Variable_Self.SpaceTotalUnnormalized) > Variable_Enemy.SpaceTotalUnnormalized
	</Has_Enough_Space_Force_Globally>

	<!-- Decides if we should go ahead with ground invasion or not -->
	<Is_Good_Ground_Grab_Target>
		(Variable_Target.StarbaseLevel == 0.0)
		*
		(1.0 - Variable_Target.EnemyForce.HasSpaceForce) 
		*
		(
			Function_Is_Good_Invasion_Target.Evaluate 
			+ 
			30.0
			+	
			5.0 * (Variable_Target.EnemyForce.HasGroundForce == 0.0)
		) 
	</Is_Good_Ground_Grab_Target>
	

	<Enemy_Present>
		((Variable_Target.EnemyForce.SpaceTotal + Variable_Target.EnemyForce.GroundTotal) > 0.0)
	</Enemy_Present>
	
	
	<Need_To_Reconnect_Islands>
		Function_Is_Connected_To_Me.Evaluate
		*
		Variable_Target.ConnectsLargestIslands
		*
		(
			Function_Is_Good_Invasion_Target.Evaluate
			+
			(10.0 * Variable_Self.WorstIslandFractionOfLargest)
		)
		*
		(
			(1.0 - Variable_Target.IsHumanControlled)
			+
			(Function_First_Attack_Allowed.Evaluate * Variable_Target.IsHumanControlled)
		)
		*
		(1.0 - Function_Should_Be_Ignored.Evaluate)
	</Need_To_Reconnect_Islands>

	<NR_Vassal_Should_Reconnect_Islands>
		Function_Need_To_Reconnect_Islands.Evaluate
		*
		(1 - Variable_Target.IsFaction{Parameter_Faction = "Rebel"})
	</NR_Vassal_Should_Reconnect_Islands>
	
	<Trapped_Fleet>
		50.0
		*
		Variable_Target.FriendlyForce.HasSpaceForce
		*
		(1 - Function_Is_Connected_To_Me.Evaluate)
		*
		(1 - Variable_Target.IsFaction {Parameter_Faction = "Neutral"})
		*
		Function_First_Attack_Allowed.Evaluate
	</Trapped_Fleet>

	<Space_Contrast>
		Variable_Target.EnemyForce.SpaceTotalUnnormalized + Variable_Target.EnemyForce.StarbaseTotalUnnormalized
	</Space_Contrast>

	
	<Ground_Contrast>
		Variable_Target.EnemyForce.GroundTotalUnnormalized + Variable_Target.EnemyForce.GroundbaseTotalUnnormalized
	</Ground_Contrast>

	<!-- AI controlled planet that is connected to other enemies -->
	<!-- The more enemy connections, the more fronts this opens -->
	<Opens_New_Front>
		(Variable_Target.IsHumanControlled == 0.0) 
		*
		Function_Is_Connected_To_Enemy.Evaluate
		*
		(1.0 - Variable_Target.ActiveTradeRoutes)
	</Opens_New_Front>

	
	<Should_Conquer_Pirate_Planet>
		Function_Is_Good_Invasion_Target.Evaluate 
		*
		(Variable_Target.IsHumanControlled == 0.0)
		*
		Function_Is_Connected_To_Me.Evaluate
		*
		(1.0 - Function_Should_Be_Ignored.Evaluate)
	</Should_Conquer_Pirate_Planet>
	
	<Should_Conquer_Opponent_Planet>
		(1 + Function_Player_Danger_Score.Evaluate)
		*
		Function_Is_Good_Invasion_Target.Evaluate 
		*
		Variable_Target.IsHumanControlled
		*
		Function_First_Attack_Allowed.Evaluate
		*
		(1.0 - Function_Should_Be_Ignored.Evaluate)
	</Should_Conquer_Opponent_Planet>
	
	
	<Should_Crush_Opponent_Planet>
		Function_Is_Connected_To_Me.Evaluate
		*
		(
			1.5
			*
			Function_Is_Good_Invasion_Target.Evaluate 
			*
			Variable_Target.IsHumanControlled
		)
		*
		Function_First_Attack_Allowed.Evaluate
		*
		(
			(Variable_Target.StarbaseLevelUnnormalized == 5)
			+ 
			Variable_Target.StructureCount {Parameter_Type = "Ground_Ion_Cannon", Parameter_Type = "Ground_Hypervelocity_Gun",Parameter_Only_Consider_Complete = 1.0}
		)
		*
		(1.0 - Function_Cowardly_Personality.Evaluate)
		*
		(1.0 - Function_Should_Be_Ignored.Evaluate)
	</Should_Crush_Opponent_Planet>
	
	<First_Attack_Allowed>
		Game.Age > Function_Initial_Grace_Period.Evaluate
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Normal]}
		*
		(40 > Variable_Self.TimeSinceGroundDefender)
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Hard]}
		*
		(80 > Variable_Self.TimeSinceGroundDefender)
	</First_Attack_Allowed>

	<Initial_Grace_Period>
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Easy]}
		* (200.0 + 40 * (5 # 15))
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Normal]}
		* (80.0 + 40 * (4 # 8))
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Hard]}
		* 20.0 * (1 # 4)
	</Initial_Grace_Period>

	
	<Skynet_Should_Perform_Unrestricted_Grab_Space>
		50.0
		*
		(Function_Space_Force_Limit_For_Unrestricted_Grab.Evaluate >= Function_Space_Contrast.Evaluate)
		*
		Function_Is_Connected_To_Me.Evaluate
		*
		(1.0 - Variable_Target.FriendlyForce.HasSpaceForce)
		*
		Variable_Target.IsHumanControlled
		*
		(1.0 - Function_Isolationist_Personality.Evaluate)
	</Skynet_Should_Perform_Unrestricted_Grab_Space>
	
	<Should_Perform_Unrestricted_Grab_Space>
		(Function_Space_Force_Limit_For_Unrestricted_Grab.Evaluate >= Function_Space_Contrast.Evaluate)
		*
		Function_Is_Connected_To_Me.Evaluate
		*
		(1.0 - Variable_Target.FriendlyForce.HasSpaceForce)
		*
		(1.0 - Variable_Target.IsHumanControlled)
		*
		(1.0 - Function_Isolationist_Personality.Evaluate)
		*
		(Function_Space_Contrast.Evaluate > 0)
	</Should_Perform_Unrestricted_Grab_Space>

	<Space_Force_Limit_For_Unrestricted_Grab>
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Easy]}
		* 3000
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Normal]}
		* 5000
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Hard]}
		* 7500
	</Space_Force_Limit_For_Unrestricted_Grab>
	
	
	<Should_Perform_Unrestricted_Grab_Land>
		50.0
		*
		Function_First_Attack_Allowed.Evaluate
		*
		(Function_Ground_Force_Limit_For_Unrestricted_Grab.Evaluate >= Variable_Target.EnemyForce.GroundTotalUnnormalized)
		*
		Function_Is_Connected_To_Me.Evaluate
		*
		Variable_Target.IsSurfaceAccessible 
		*
		(Variable_Target.StarbaseLevel == 0.0)
		*
		(1.0 - Variable_Target.EnemyForce.HasSpaceForce) 
	</Should_Perform_Unrestricted_Grab_Land>
	
	<Ground_Force_Limit_For_Unrestricted_Grab>
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Easy]}
		* 200.0
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Normal]}
		* 400.0
		+
		Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Hard]}
		* 800.0
	</Ground_Force_Limit_For_Unrestricted_Grab>

	
	<Player_Danger_Score>
		clamp(
			0.75 
			*
			Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Easy]}
			*
			Variable_Human.PlanetsControlled * Variable_Human.PlanetsControlled,
			0,
			1
		)
		+
		clamp(
			Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Normal]}
			* 
			Variable_Human.PlanetsControlled * Variable_Human.PlanetsControlled,
			0.05,
			1.2
		)
		+
		clamp(
			Variable_Self.IsDifficulty{Parameter_Difficulty_Level_Type = DifficultyLevelType[Hard]}
			*
			Variable_Human.PlanetsControlled * Variable_Human.PlanetsControlled,
			0.1,
			10
		)
	</Player_Danger_Score>

</Equations>
